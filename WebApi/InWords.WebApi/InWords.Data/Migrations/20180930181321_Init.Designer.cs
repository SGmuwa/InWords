// <auto-generated />
using System;
using InWords.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InWords.Data.Migrations
{
    [DbContext(typeof(InWordsDataContext))]
    [Migration("20180930181321_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");

            modelBuilder.Entity("InWords.Data.Models.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int>("Role");

                    b.HasKey("AccountID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("InWords.Data.Models.Language", b =>
                {
                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .HasMaxLength(32);

                    b.HasKey("LanguageID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("InWords.Data.Models.Seria", b =>
                {
                    b.Property<int>("SeriaID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatorID");

                    b.Property<string>("SeriaName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("SeriaID");

                    b.HasIndex("CreatorID");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("InWords.Data.Models.SeriaWord", b =>
                {
                    b.Property<int>("SeriaWordID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Level");

                    b.Property<int>("SeriaID");

                    b.Property<int>("UserWordPairID");

                    b.HasKey("SeriaWordID");

                    b.HasIndex("SeriaID");

                    b.HasIndex("UserWordPairID");

                    b.ToTable("SeriaWords");
                });

            modelBuilder.Entity("InWords.Data.Models.User", b =>
                {
                    b.Property<int>("UserID");

                    b.Property<string>("AvatarPath");

                    b.Property<int>("Expirience");

                    b.Property<string>("NickName")
                        .HasMaxLength(32);

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("InWords.Data.Models.UserSeria", b =>
                {
                    b.Property<int>("UserSeriaID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("SeriaID");

                    b.Property<int?>("UserID");

                    b.HasKey("UserSeriaID");

                    b.HasIndex("SeriaID");

                    b.HasIndex("UserID");

                    b.ToTable("UsersSerias");
                });

            modelBuilder.Entity("InWords.Data.Models.UserWordPair", b =>
                {
                    b.Property<int>("UserWordPairID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsInvertPair");

                    b.Property<int>("UserID");

                    b.Property<int>("WordPairID");

                    b.HasKey("UserWordPairID");

                    b.HasIndex("UserID");

                    b.HasIndex("WordPairID");

                    b.ToTable("UserWordPairs");
                });

            modelBuilder.Entity("InWords.Data.Models.Word", b =>
                {
                    b.Property<int>("WordID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("LanguageID");

                    b.HasKey("WordID");

                    b.HasIndex("LanguageID");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("InWords.Data.Models.WordPair", b =>
                {
                    b.Property<int>("WordPairID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Rating");

                    b.Property<int>("WordForeignID");

                    b.Property<int>("WordNativeID");

                    b.HasKey("WordPairID");

                    b.HasIndex("WordForeignID");

                    b.HasIndex("WordNativeID");

                    b.ToTable("WordPairs");
                });

            modelBuilder.Entity("InWords.Data.Models.Seria", b =>
                {
                    b.HasOne("InWords.Data.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InWords.Data.Models.SeriaWord", b =>
                {
                    b.HasOne("InWords.Data.Models.Seria", "Seria")
                        .WithMany()
                        .HasForeignKey("SeriaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InWords.Data.Models.UserWordPair", "UserWordPair")
                        .WithMany()
                        .HasForeignKey("UserWordPairID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InWords.Data.Models.User", b =>
                {
                    b.HasOne("InWords.Data.Models.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("InWords.Data.Models.User", "UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InWords.Data.Models.UserSeria", b =>
                {
                    b.HasOne("InWords.Data.Models.Seria", "Seria")
                        .WithMany()
                        .HasForeignKey("SeriaID");

                    b.HasOne("InWords.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("InWords.Data.Models.UserWordPair", b =>
                {
                    b.HasOne("InWords.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InWords.Data.Models.WordPair", "WordPair")
                        .WithMany()
                        .HasForeignKey("WordPairID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InWords.Data.Models.Word", b =>
                {
                    b.HasOne("InWords.Data.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageID");
                });

            modelBuilder.Entity("InWords.Data.Models.WordPair", b =>
                {
                    b.HasOne("InWords.Data.Models.Word", "WordForeign")
                        .WithMany()
                        .HasForeignKey("WordForeignID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InWords.Data.Models.Word", "WordNative")
                        .WithMany()
                        .HasForeignKey("WordNativeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
