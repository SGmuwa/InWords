WebAPI — связь приложений с сайтом
==================================

### Текущая версия: 1.0

Сервис, позволяющий внешним одобренным сервисам и приложениям взаимодействовать с сайтом, 
работающим на платформе [ASP.Net Core 2.1](https://docs.microsoft.com/ru-ru/aspnet/core/release-notes/aspnetcore-2.1?view=aspnetcore-2.1).

Одним из таких приложений является [Официальный клиент на Android](https://github.com/rugged-bl/InWords).

По всем вопросам: https://github.com/rugged-bl/InWords/issues


1. Регламент методов API
------------------------
-   Запрос осуществляется по адресу:
 
        http://chatqq.ru/apu/<подсервис>

-   Данные, передаваемые с запросом на сервер, отправляются либо как POST, либо как PUT, UPDATE или DELETE в JSON формате.
-   Контент, отправляемый сервису API должен быть в формате JSON, иметь заголовок:

        Content-Type: application/json; charset=UTF-8

2. Регистраци
--------------
Для того, чтобы добавить пользователя в систему, используется токен простая форма регистрации. 
Отправляется POST со схемой из тела (FromBody). 

```json
{
    "Email": "Email@mail.ru",
    "Password": "!secret"
}
```

Чтобы добавить аккаунт необходимо запрос отправить на:

	http://chatqq.ru/api/auth/registration


3. Авторизация
--------------
Для того, чтобы проверить подлинность приложения, работающего с WebAPI, используется токен. 
Токен передаётся в POST с ключом "access_token" в запросах к API. Чтобы получить токен, необходимо отправить на:

    http://chatqq.ru/api/auth/token 

данные в заголовке согласно схеме Basic Auth (//todo поясняющая ссылка)

4. Как проверить токен из метода API
------------------------------------
Например, отправив запрос get по адресу:
	
	http://chatqq.ru/api/values/GetLogin

4. Методы API, включённые в плагин
----------------------------------
### UpdateUserData
Ожидает PUT "token" и тело вида.

```json
{
	"Nickname": "NewCoolNick",
	"AvatarPath": "AvatarLink"
}
```


5. Безопасность
---------------